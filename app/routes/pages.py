# routes/pages.py
from flask import Blueprint, render_template, session, request, flash, redirect, url_for

pages_bp = Blueprint('pages', __name__)

# Translation helper function
def get_page_text(key, lang=None):
    """Get translated text for page messages"""
    if lang is None:
        lang = session.get("lang", "de")
    
    translations = {
        'message_sent': {
            'uk': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.',
            'de': 'Nachricht erfolgreich gesendet.',
            'en': 'Message sent successfully.'
        },
        'send_error': {
            'uk': '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ.',
            'de': 'Beim Senden ist ein Fehler aufgetreten.',
            'en': 'An error occurred while sending.'
        },
        'fill_all_fields': {
            'uk': '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.',
            'de': 'Bitte f√ºllen Sie alle Felder aus.',
            'en': 'Please fill in all fields.'
        }
    }
    
    return translations.get(key, {}).get(lang, translations.get(key, {}).get('en', key))

@pages_bp.route('/privacy')
def privacy():
    lang = session.get("lang", "de")
    titles = {"de": "Datenschutz", "uk": "–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ", "en": "Privacy Policy"}
    return render_template('privacy.html', title=titles.get(lang, 'Datenschutz'), lang=lang)

@pages_bp.route('/impressum')
def impressum():
    lang = session.get("lang", "de")
    return render_template('impressum.html', title="Impressum", lang=lang)

@pages_bp.route('/qr-codes')
def qr_codes():
    lang = session.get("lang", "de")
    title_map = {"uk": "QR-–∫–æ–¥–∏", "de": "QR-Codes", "en": "QR Codes"}
    title = title_map.get(lang, "QR-Codes")
    return render_template('qr_codes.html', title=title, lang=lang)

@pages_bp.route('/contact', methods=['GET', 'POST'])
def contact():
    lang = session.get("lang", "de")
    if request.method == 'POST':
        name = request.form.get("name")
        email = request.form.get("email")
        message = request.form.get("message")
        
        if name and email and message:
            msg = f"üì¨ <b>–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏</b>\n\n" \
                  f"üë§ <b>–Ü–º‚Äô—è:</b> {name}\n" \
                  f"üìß <b>Email:</b> {email}\n" \
                  f"üìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b> {message}"
            try:
                send_telegram_message(msg)  # –∞–±–æ email
                flash(get_page_text('message_sent'), "success")
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                flash(get_page_text('send_error'), "error")
        else:
            flash(get_page_text('fill_all_fields'), "error")
        return redirect(url_for("pages.contact"))
    
    return render_template('contact.html', title="–ö–æ–Ω—Ç–∞–∫—Ç–∏", lang=lang)

services = [
    {
        "name": "web-dev",
        "title": "–í–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞",
        "description": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∞–π—Ç—ñ–≤, –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤, API —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π.",
        "chat_endpoint": "/chatbot/web-dev",
        "submit_endpoint": "/crm/submit_task"
    },
    {
        "name": "chatbots",
        "title": "–†–æ–∑—Ä–æ–±–∫–∞ –±–æ—Ç—ñ–≤",
        "description": "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram, WhatsApp, Discord-–±–æ—Ç—ñ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±—ñ–∑–Ω–µ—Å—É.",
        "chat_endpoint": "/chatbot/chatbots",
        "submit_endpoint": "/crm/submit_task"
    },
    {
        "name": "automation",
        "title": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —Ä—É—Ç–∏–Ω–Ω–∏—Ö –∑–∞–¥–∞—á, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è AI, CRM-—Å–∏—Å—Ç–µ–º–∏.",
        "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —Ä—É—Ç–∏–Ω–Ω–∏—Ö –∑–∞–¥–∞—á, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è AI —Ç–∞ CRM-—Å–∏—Å—Ç–µ–º.",
        "chat_endpoint": "/chatbot/automation",
        "submit_endpoint": "/crm/submit_task"
    },
    {
        "name": "ai-ml",
        "title": "AI —Ç–∞ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è",
        "description": "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö, NLP, —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É.",
        "chat_endpoint": "/chatbot/ai-ml",
        "submit_endpoint": "/crm/submit_task"
    },
    {
        "name": "media-buying",
        "title": "–ú–µ–¥—ñ–∞–±–∞—ó–Ω–≥",
        "description": "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π, —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥, –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.",
        "chat_endpoint": "/chatbot/media-buying",
        "submit_endpoint": "/crm/submit_task"
    },
    {
        "name": "databases",
        "title": "–ë–∞–∑–∏ –¥–∞–Ω–∏—Ö",
        "description": "–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è, –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –º–∞—Å–∏–≤—ñ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.",
        "chat_endpoint": "/chatbot/databases",
        "submit_endpoint": "/crm/submit_task"
    }
]

def generate_service_page(service):
    def service_page():
        lang = session.get("lang", "de")
        return render_template(
            "service_template.html",
            service_name=service["name"],
            service_title=service["title"],
            service_description=service["description"],
            chat_endpoint=service["chat_endpoint"],
            submit_endpoint=service["submit_endpoint"],
            lang=lang
        )
    return service_page

for service in services:
    pages_bp.add_url_rule(
        f'/{service["name"]}',
        endpoint=f'service_page_{service["name"]}',
        view_func=generate_service_page(service)
    )
