# routes/crm.py

from flask import Blueprint, request, jsonify
from app.models.client import db, Client, ClientRequest
import requests
import logging
from app.models.project import create_project_from_request, APIKey

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è CRM
crm_bp = Blueprint("crm", __name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_telegram_credentials():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    import os
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        token = os.environ.get('TELEGRAM_BOT_TOKEN')
        chat_id = os.environ.get('TELEGRAM_CHAT_ID')
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not token:
            token = APIKey.get_key('telegram_bot_token')
        if not chat_id:
            chat_id = APIKey.get_key('telegram_chat_id')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if not token:
            token = "7572478553:AAEJxJ9Il80zrHAjcD7ZcQnht3EP-sHYrjs"
            logger.warning("Using default Telegram bot token! Set TELEGRAM_BOT_TOKEN env variable.")
        if not chat_id:
            chat_id = "7444992311"
            logger.warning("Using default Telegram chat ID! Set TELEGRAM_CHAT_ID env variable.")
            
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram —Ç–æ–∫–µ–Ω: {token[:5]}...{token[-5:]} –∏ —á–∞—Ç ID: {chat_id}")
            
        return token, chat_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Telegram-–∫–ª—é—á–µ–π: {e}")
        return "7572478553:AAEJxJ9Il80zrHAjcD7ZcQnht3EP-sHYrjs", "7444992311"

def send_telegram_message(text):
    try:
        token, chat_id = get_telegram_credentials()
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–∞ —á–∞—Ç ID: {chat_id}")
        response = requests.post(url, data=data, timeout=10)
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram: {response.status_code}")
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
            return False
            
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        return False

# üîπ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–æ–ø—Ü—ñ–π–Ω–æ)
@crm_bp.route("/clients", methods=["POST"])
def add_client():
    data = request.json
    name = data.get("name")
    email = data.get("email")
    message = data.get("message", "")

    if not name or not email:
        return jsonify({"error": "–Ü–º'—è —Ç–∞ email —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏"}), 400

    new_client = Client(name=name, email=email, message=message)
    db.session.add(new_client)
    db.session.commit()

    return jsonify({"message": "–ö–ª—ñ—î–Ω—Ç –¥–æ–¥–∞–Ω–∏–π", "client": new_client.to_dict()}), 201

# üî∏ –ü—Ä–∏–π–æ–º –¢–ó
@crm_bp.route("/submit_task", methods=["POST"])
def submit_task():
    data = request.json

    project_type = data.get("project_type")
    project_name = data.get("project_name")
    task_description = data.get("task_description")
    key_features = data.get("key_features")
    design_preferences = data.get("design_preferences")
    platform = data.get("platform")
    budget = data.get("budget")
    timeline = data.get("timeline")
    integrations = data.get("integrations")
    contact_method = data.get("contact_method")
    contact_info = data.get("contact_info", "–ê–Ω–æ–Ω—ñ–º–Ω–æ")

    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    required_fields = [project_type, project_name, task_description, contact_method]
    if not all(required_fields):
        return jsonify({"error": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è."}), 400

    if contact_method.lower() == "–∞–Ω–æ–Ω—ñ–º–Ω–æ":
        contact_info = None

    # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤ –±–∞–∑—É
    new_request = ClientRequest(
        project_type=project_type,
        task_description=task_description,
        contact_method=contact_method,
        contact_info=contact_info
    )
    new_request.project_name = project_name
    new_request.key_features = key_features
    new_request.design_preferences = design_preferences
    new_request.platform = platform
    new_request.budget = budget
    new_request.timeline = timeline
    new_request.integrations = integrations

    db.session.add(new_request)
    db.session.commit()

    # –ü–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    message = f"""
üì© <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑—Ä–æ–±–∫—É</b>

üîπ <b>–¢–∏–ø –ø—Ä–æ—î–∫—Ç—É:</b> {project_type}
üìõ <b>–ù–∞–∑–≤–∞:</b> {project_name}
üìù <b>–û–ø–∏—Å:</b> {task_description}
üß© <b>–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:</b> {key_features}
üé® <b>–î–∏–∑–∞–π–Ω:</b> {design_preferences}
üíª <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform}
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> {budget}
‚è±Ô∏è <b>–¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:</b> {timeline}
üîó <b>–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:</b> {integrations}

üìû <b>–°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É:</b> {contact_method}
üìß <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact_info or "–ù–µ–º–∞—î"}

üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> {new_request.id}
""".strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    telegram_sent = send_telegram_message(message)
    if telegram_sent:
        logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ {new_request.id}")
    else:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {new_request.id}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –¢–ó
    try:
        project = create_project_from_request(new_request)
        if project:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç {project.id} –¥–ª—è –∑–∞—è–≤–∫–∏ {new_request.id}")
            return jsonify({
                "message": "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω", 
                "request": new_request.to_dict(),
                "project_id": project.id
            }), 201
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
    
    return jsonify({"message": "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", "request": new_request.to_dict()}), 201
