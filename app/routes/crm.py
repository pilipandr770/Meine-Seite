from flask import Blueprint, request, jsonify
from app.models.client import db, Client, ClientRequest
import requests

TELEGRAM_BOT_TOKEN = "7572478553:AAEJxJ9Il80zrHAjcD7ZcQnht3EP-sHYrjs"
TELEGRAM_CHAT_ID = "7444992311"  # –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ @userinfobot

def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    requests.post(url, data=data)

crm_bp = Blueprint("crm", __name__)

@crm_bp.route("/clients", methods=["POST"])
def add_client():
    data = request.json
    name = data.get("name")
    email = data.get("email")
    message = data.get("message", "")

    if not name or not email:
        return jsonify({"error": "–Ü–º'—è —Ç–∞ email —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏"}), 400

    new_client = Client(name=name, email=email, message=message)
    db.session.add(new_client)
    db.session.commit()

    return jsonify({"message": "–ö–ª—ñ—î–Ω—Ç –¥–æ–¥–∞–Ω–∏–π", "client": new_client.to_dict()}), 201

@crm_bp.route("/submit_task", methods=["POST"])
def submit_task():
    data = request.json
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    project_type = data.get("project_type")
    project_name = data.get("project_name")
    task_description = data.get("task_description")
    key_features = data.get("key_features")
    design_preferences = data.get("design_preferences")
    platform = data.get("platform")
    budget = data.get("budget")
    timeline = data.get("timeline")
    integrations = data.get("integrations")
    contact_method = data.get("contact_method")
    contact_info = data.get("contact_info", "–ê–Ω–æ–Ω—ñ–º–Ω–æ")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    required_fields = [project_type, project_name, task_description, contact_method]
    if not all(required_fields):
        return jsonify({"error": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è."}), 400

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¢–ó
    new_request = ClientRequest(
        project_type=project_type,
        task_description=task_description,
        contact_method=contact_method,
        contact_info=contact_info if contact_method.lower() != "–∞–Ω–æ–Ω—ñ–º–Ω–æ" else None
    )

    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
    new_request.project_name = project_name
    new_request.key_features = key_features
    new_request.design_preferences = design_preferences
    new_request.platform = platform
    new_request.budget = budget
    new_request.timeline = timeline
    new_request.integrations = integrations

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
    db.session.add(new_request)
    db.session.commit()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    message = f"üì© <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞</b>\n"
    message += f"üîπ <b>–ü—Ä–æ—î–∫—Ç:</b> {project_type}\n"
    message += f"üìù <b>–ù–∞–∑–≤–∞:</b> {project_name}\n"
    message += f"üìù <b>–û–ø–∏—Å:</b> {task_description}\n"
    message += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact_info if contact_info != '–ê–Ω–æ–Ω—ñ–º–Ω–æ' else '–ù–µ–º–∞—î'}"
    
    try:
        send_telegram_message(message)
    except Exception as e:
        print(f"Failed to send Telegram notification: {str(e)}")

    return jsonify({"message": "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞", "request": new_request.to_dict()}), 201
