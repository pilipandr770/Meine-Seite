import os
import openai
import logging
from flask import Blueprint, request, jsonify
from dotenv import load_dotenv
from app.models.client import db, ClientRequest
from app.expert_data import EXPERT_DATA  # üîπ –î–æ–¥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –¥–æ—Å–≤—ñ–¥
from werkzeug.utils import secure_filename  # <-- added import

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

chatbot_bp = Blueprint("chatbot", __name__)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

UPLOAD_FOLDER = "temp_audio"  # New: Directory for temporary audio files
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# üîπ –ì–æ–ª–æ–≤–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç (–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó)
MAIN_PROMPT = """
–í—ñ—Ç–∞—é! –Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –∫–æ–º–ø–∞–Ω—ñ—é Andrii Pylypchuk.

üìå **–©–æ —è –º–æ–∂—É –¥–ª—è –≤–∞—Å –∑—Ä–æ–±–∏—Ç–∏?**
- –ü–æ—è—Å–Ω–∏—Ç–∏, —è–∫ –ø—Ä–∞—Ü—é—î —Å–∞–π—Ç —Ç–∞ —è–∫—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–Ω –Ω–∞–¥–∞—î.
- –†–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏: –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞, —á–∞—Ç-–±–æ—Ç–∏, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, AI, –º–µ–¥—ñ–∞–±–∞—ó–Ω–≥, –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
- –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∞–±–æ –Ω–∞–ø—Ä—è–º–æ–∫.
- –ü—ñ–¥–∫–∞–∑–∞—Ç–∏, —è–∫ –∫—Ä–∞—â–µ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ—î–∫—Ç–æ–º.

üîπ **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?**
1Ô∏è‚É£ **–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º–æ–∫ —Ä–æ–±–æ—Ç–∏** ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.
2Ô∏è‚É£ **–ü–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—è –∑ –Ω–∞—à–∏–º –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–º –∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º** ‚Äì —É –∫–æ–∂–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ —î —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π AI, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Å–∫–ª–∞—Å—Ç–∏ –¢–ó.
3Ô∏è‚É£ **–û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞—è–≤–∫—É** ‚Äì –ø—ñ—Å–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–µ—Ç–∞–ª–µ–π –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.

üì¢ **–†–æ–∑–∫–∞–∂—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å, —ñ —è –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è!**
"""

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞

def get_expert_prompt(category):
    if category not in EXPERT_DATA:
        print(f"Category '{category}' not found in expert data. Using MAIN_PROMPT fallback.")
        return MAIN_PROMPT

    data = EXPERT_DATA[category]
    experience_text = "\n".join([f"- {exp}" for exp in data["experience"]])
    return f"""
        {data['marketing']}

        üîπ **–ú–æ—è —Ä–æ–ª—å —è–∫ –Ü–¢-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Ç–∞ –ø—Ä–æ—î–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞:**
        - –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —á—ñ—Ç–∫–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.
        - –ü—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è, —â–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É.
        - –†–æ–∑–±–∏–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ —ñ–¥–µ—ó –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –∫—Ä–æ–∫–∏, —â–æ–± —ó—Ö –±—É–ª–æ –ª–µ–≥–∫–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏.

        üîπ **–©–æ –º–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏:**
        {experience_text}

        üìå –î–∞–≤–∞–π—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç! –Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è.
    """

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ OpenAI
def generate_response(prompt, user_message):
    if not user_message:
        return jsonify({"error": "–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"}), 400

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": prompt}, {"role": "user", "content": user_message}]
        )
        bot_reply = response.choices[0].message.content
        return jsonify({"response": bot_reply})
    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

# üîπ –ì–æ–ª–æ–≤–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è)
@chatbot_bp.route("/", methods=["POST"])
def main_chatbot():
    data = request.json
    user_message = data.get("message", "")
    return generate_response(MAIN_PROMPT, user_message)

# üîπ –¢–µ–º–∞—Ç–∏—á–Ω—ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ (–µ–∫—Å–ø–µ—Ä—Ç–∏ —É —Å–≤–æ—ó—Ö –Ω–∞–ø—Ä—è–º–∞—Ö)
@chatbot_bp.route("/<string:category>", methods=["POST"])
def category_chatbot(category):
    data = request.json
    print("Received payload:", data)  # Log the request payload
    user_message = data.get("message", "")

    expert_prompt = get_expert_prompt(category)
    if not expert_prompt:
        return jsonify({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"}), 400

    return generate_response(expert_prompt, user_message)
