import os
import openai
import logging
from flask import Blueprint, request, jsonify
from dotenv import load_dotenv
from app.models.client import db, ClientRequest
from app.expert_data import EXPERT_DATA  # üîπ –î–æ–¥–∞—î–º–æ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –¥–æ—Å–≤—ñ–¥
from werkzeug.utils import secure_filename  # <-- added import

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

chatbot_bp = Blueprint("chatbot", __name__)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

UPLOAD_FOLDER = "temp_audio"  # New: Directory for temporary audio files
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# üîπ –ì–æ–ª–æ–≤–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç (–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó)
MAIN_PROMPT = """
–í—ñ—Ç–∞—é! –Ø ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç Andrii Pylypchuk,  
—è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—è —É —Å–≤—ñ—Ç—ñ IT, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó —Ç–∞ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É.

üìå **–•—Ç–æ —è —Ç–∞ —á–æ–º—É –≤–∞–º –≤–∏–≥—ñ–¥–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ Andrii Pylypchuk?**  
- –Ø –ø—Ä–∞—Ü—é—é —è–∫ **–Ü–¢-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Ç–∞ –ø—Ä–æ—î–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä**, –¥–æ–ø–æ–º–∞–≥–∞—é—á–∏ –∫–ª—ñ—î–Ω—Ç–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ —ó—Ö–Ω—ñ —ñ–¥–µ—ó.  
- Andrii Pylypchuk ‚Äî **–¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –∑ 20-—Ä—ñ—á–Ω–∏–º —Å—Ç–∞–∂–µ–º** —É Python —Ç–∞ AI.  
- –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –±—ñ–∑–Ω–µ—Å–∞–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ **–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Ü–∏—Ñ—Ä–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è** –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º OpenAI.  

–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –≤–∞—à –±—ñ–∑–Ω–µ—Å –º–æ–∂–µ **–∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É, –∑–∞–ª—É—á–∞—Ç–∏ –±—ñ–ª—å—à–µ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –∑–º–µ–Ω—à—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏** ‚Äî  
—è —ñ–∑ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è–º –≤–∞–º –¥–æ–ø–æ–º–æ–∂—É!  
"""

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
def get_expert_prompt(category):
    # If category is not defined in EXPERT_DATA, fall back to MAIN_PROMPT
    if category not in EXPERT_DATA:
        print(f"Category '{category}' not found in expert data. Using MAIN_PROMPT fallback.")
        return MAIN_PROMPT

    data = EXPERT_DATA[category]
    experience_text = "\n".join([f"- {exp}" for exp in data["experience"]])
    return f"""
        {data['marketing']}

        üîπ **–ú–æ—è —Ä–æ–ª—å —è–∫ –Ü–¢-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Ç–∞ –ø—Ä–æ—î–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞:**
        - –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —á—ñ—Ç–∫–µ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è.
        - –ü—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è, —â–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É.
        - –†–æ–∑–±–∏–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—ñ —ñ–¥–µ—ó –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –∫—Ä–æ–∫–∏, —â–æ–± —ó—Ö –±—É–ª–æ –ª–µ–≥–∫–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏.

        üîπ **–©–æ –º–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏:**
        {experience_text}

        üìå –î–∞–≤–∞–π—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç! –Ø —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è.
    """

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ OpenAI
def generate_response(prompt, user_message):
    if not user_message:
        return jsonify({"error": "–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"}), 400

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": prompt}, {"role": "user", "content": user_message}]
        )
        bot_reply = response.choices[0].message.content
        return jsonify({"response": bot_reply})
    except Exception as e:
        import traceback
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

# üîπ –ì–æ–ª–æ–≤–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç (–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è)
@chatbot_bp.route("/", methods=["POST"])
def main_chatbot():
    data = request.json
    user_message = data.get("message", "")
    return generate_response(MAIN_PROMPT, user_message)

# üîπ –¢–µ–º–∞—Ç–∏—á–Ω—ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ (–µ–∫—Å–ø–µ—Ä—Ç–∏ —É —Å–≤–æ—ó—Ö –Ω–∞–ø—Ä—è–º–∞—Ö)
@chatbot_bp.route("/<string:category>", methods=["POST"])
def category_chatbot(category):
    data = request.json
    print("Received payload:", data)  # Log the request payload
    user_message = data.get("message", "")

    expert_prompt = get_expert_prompt(category)
    if not expert_prompt:
        return jsonify({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"}), 400

    return generate_response(expert_prompt, user_message)

@chatbot_bp.route("/voice", methods=["POST"])
def voice_chat():
    if "audio" not in request.files:
        print("‚ùå –§–∞–π–ª –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ!")
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}), 400

    audio_file = request.files["audio"]
    filename = secure_filename(audio_file.filename)
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    audio_file.save(file_path)
    print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª: {file_path}")

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Whisper –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
        with open(file_path, "rb") as file:
            transcription = openai.Audio.transcribe("whisper-1", file)
        os.remove(file_path)  # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        user_message = transcription["text"].strip()
        print(f"‚úÖ Whisper —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤: {user_message}")

        if not user_message:
            return jsonify({"error": "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å"}), 400

        # GPT-4 –≥–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:"},
                {"role": "user", "content": user_message}
            ]
        )
        bot_reply = response.choices[0].message.content
        print(f"‚úÖ GPT-4 –≤—ñ–¥–ø–æ–≤—ñ–≤: {bot_reply}")

        return jsonify({"transcription": user_message, "response": bot_reply})

    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —É Flask:", str(e))
        return jsonify({"error": str(e)}), 500
