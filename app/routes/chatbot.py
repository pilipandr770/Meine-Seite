# routes/chatbot.py

import os
import logging
import traceback
from flask import Blueprint, request, jsonify
from dotenv import load_dotenv
from openai import OpenAI
from app.models.client import db, ClientRequest
from app.expert_data import EXPERT_DATA

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

chatbot_bp = Blueprint("chatbot", __name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# üîπ –ì–æ–ª–æ–≤–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç (–Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ)
@chatbot_bp.route("/", methods=["POST"])
def main_chatbot():
    data = request.json
    user_message = data.get("message", "")
    assistant_id = os.getenv("MAIN_ASSISTANT_ID")

    if not user_message:
        return jsonify({"error": "–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"}), 400

    try:
        thread = client.beta.threads.create()
        client.beta.threads.messages.create(thread_id=thread.id, role="user", content=user_message)
        run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=assistant_id)

        while True:
            run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run.status == "completed":
                break
            elif run.status == "failed":
                return jsonify({"error": "–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"}), 500

        messages = client.beta.threads.messages.list(thread_id=thread.id)
        last_message = messages.data[0].content[0].text.value
        return jsonify({"response": last_message})
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –∞—Å–∏—Å—Ç–µ–Ω—Ç—ñ")
        return jsonify({"error": str(e)}), 500


# üîπ –¢–µ–º–∞—Ç–∏—á–Ω—ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∏ (–µ–∫—Å–ø–µ—Ä—Ç–∏ –∑–∞ –Ω–∞–ø—Ä—è–º–∞–º–∏)
@chatbot_bp.route("/<string:category>", methods=["POST"])
def category_chatbot(category):
    data = request.json
    user_message = data.get("message", "")

    if not user_message:
        return jsonify({"error": "–ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"}), 400

    expert_info = EXPERT_DATA.get(category)
    if not expert_info:
        return jsonify({"error": "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è"}), 400

    assistant_id = expert_info.get("assistant_id") or os.getenv("TASK_ASSISTANT_ID")

    try:
        thread = client.beta.threads.create()

        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ–±—É–≤–∞—î —É —Ä–æ–∑–¥—ñ–ª—ñ '{category}' —ñ —Ö–æ—á–µ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è. –í—Ä–∞—Ö—É–π —Ü–µ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        )

        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_message
        )

        run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=assistant_id)

        while True:
            run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run.status == "completed":
                break
            elif run.status == "failed":
                return jsonify({"error": "–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"}), 500

        messages = client.beta.threads.messages.list(thread_id=thread.id)
        last_message = messages.data[0].content[0].text.value
        return jsonify({"response": last_message})
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ —É –∞—Å–∏—Å—Ç–µ–Ω—Ç—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}")
        return jsonify({"error": str(e)}), 500


# üîπ –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@chatbot_bp.route("/voice", methods=["POST"])
def voice_chatbot():
    assistant_id = os.getenv("MAIN_ASSISTANT_ID")
    audio_file = request.files.get("audio")

    if not audio_file:
        return jsonify({"error": "–ù–µ–º–∞—î –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É"}), 400

    try:
        print("üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª:", audio_file.filename)
        print("üì¶ MIME:", audio_file.mimetype)

        try:
            transcription = client.audio.transcriptions.create(
                model="whisper-1",
                file=(audio_file.filename, audio_file.stream, audio_file.mimetype),
                response_format="text"
            )
        except Exception as exc:
            if "whisper-1" in str(exc):
                return jsonify({"error": "–í–∞—à –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –º–æ–¥–µ–ª—ñ 'whisper-1'. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞."}), 403
            raise exc

        print("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è:", transcription)

        thread = client.beta.threads.create()
        client.beta.threads.messages.create(thread_id=thread.id, role="user", content=transcription)
        run = client.beta.threads.runs.create(thread_id=thread.id, assistant_id=assistant_id)

        while True:
            run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
            if run.status == "completed":
                break
            elif run.status == "failed":
                return jsonify({"error": "–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏"}), 500

        messages = client.beta.threads.messages.list(thread_id=thread.id)
        last_message = messages.data[0].content[0].text.value

        return jsonify({"transcription": transcription, "response": last_message})

    except Exception as e:
        print("üî• –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞:", traceback.format_exc())
        return jsonify({"error": str(e)}), 500
