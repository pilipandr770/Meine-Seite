document.addEventListener("DOMContentLoaded", function() {
    const userInput = document.getElementById("userInput");
    const messagesDiv = document.getElementById("messages");
    const sendButton = document.getElementById("sendButton");
    const recordButton = document.getElementById("recordButton");

    let mediaRecorder;
    let audioChunks = [];

    // üîπ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    // Read CSRF token from meta tag so static JS can include it in POSTs
    const csrfTokenMeta = document.querySelector('meta[name="csrf-token"]');
    const CSRF_TOKEN = csrfTokenMeta ? csrfTokenMeta.getAttribute('content') : null;

    async function sendMessage() {
        if (!userInput.value.trim()) return;

        const userMessage = userInput.value;
        messagesDiv.innerHTML += `<p><strong>–í–∏:</strong> ${userMessage}</p>`;
        userInput.value = "";

        try {
            const response = await fetch("/chatbot", {
                method: "POST",
                headers: { "Content-Type": "application/json", ...(CSRF_TOKEN ? { 'X-CSRF-Token': CSRF_TOKEN } : {}) },
                body: JSON.stringify({ message: userMessage })
            });

            const data = await response.json();
            messagesDiv.innerHTML += `<p><strong>–ë–æ—Ç:</strong> ${data.response || "–ü–æ–º–∏–ª–∫–∞!"}</p>`;
        } catch (error) {
            messagesDiv.innerHTML += `<p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.</p>`;
        }

        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    if (sendButton) {
        sendButton.addEventListener("click", sendMessage);
    }

    if (userInput) {
        userInput.addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                sendMessage();
            }
        });
    }

    // üîπ –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (recordButton) {
        recordButton.addEventListener("click", async () => {
            console.log("üé§ –ö–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ");

            if (!mediaRecorder || mediaRecorder.state === "inactive") {
                try {
                    console.log("üé§ –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞...");
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

                    mediaRecorder = new MediaRecorder(stream);
                    audioChunks = [];

                    mediaRecorder.ondataavailable = event => {
                        audioChunks.push(event.data);
                    };

                    mediaRecorder.onstop = async () => {
                        console.log("üé§ –ó–∞–ø–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...");
                        const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
                        audioChunks = [];

                        const formData = new FormData();
                        formData.append("audio", audioBlob, "voice_message.webm");

                        messagesDiv.innerHTML += `<p><strong>–í–∏ (–≥–æ–ª–æ—Å):</strong> üé§ –û–±—Ä–æ–±–∫–∞...</p>`;

                        try {
                            const response = await fetch("/chatbot/voice", {
                                method: "POST",
                                headers: CSRF_TOKEN ? { 'X-CSRF-Token': CSRF_TOKEN } : {},
                                body: formData
                            });

                            const data = await response.json();

                            if (data.error) {
                                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", data.error);
                                messagesDiv.innerHTML += `<p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> ${data.error}</p>`;
                            } else {
                                console.log("‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ:", data.transcription);
                                console.log("ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å:", data.response);
                                messagesDiv.innerHTML += `<p><strong>–í–∏ (–≥–æ–ª–æ—Å):</strong> ${data.transcription}</p>`;
                                messagesDiv.innerHTML += `<p><strong>–ë–æ—Ç:</strong> ${data.response}</p>`;
                            }
                        } catch (error) {
                            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å—É:", error);
                            messagesDiv.innerHTML += `<p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.</p>`;
                        }

                        messagesDiv.scrollTop = messagesDiv.scrollHeight;
                    };

                    mediaRecorder.start();
                    console.log("üéôÔ∏è –ü–æ—á–∞–≤—Å—è –∑–∞–ø–∏—Å...");
                    recordButton.textContent = "‚èπÔ∏è"; // –°—Ç–æ–ø
                } catch (error) {
                    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:", error);
                }
            } else {
                mediaRecorder.stop();
                console.log("üõë –ó–∞–ø–∏—Å –∑—É–ø–∏–Ω–µ–Ω–æ");
                recordButton.textContent = "üé§"; // –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –∑–Ω–æ–≤—É
            }
        });
    }
});
