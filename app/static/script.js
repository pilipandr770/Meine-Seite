document.addEventListener("DOMContentLoaded", function() {
    // –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    const introVideo = document.getElementById("intro-video");
    if (introVideo) {
        introVideo.play();
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
    async function sendMessage() {
        const userInput = document.getElementById("userInput");
        const messagesDiv = document.getElementById("messages");
        
        if (!userInput.value.trim()) return;
        
        messagesDiv.innerHTML += `<p><strong>–í–∏:</strong> ${userInput.value}</p>`;
        const userMessage = userInput.value;
        userInput.value = "";
        
        try {
            const response = await fetch("/chatbot", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ message: userMessage })
            });
            
            const data = await response.json();
            messagesDiv.innerHTML += `<p><strong>–ë–æ—Ç:</strong> ${data.response || "–ü–æ–º–∏–ª–∫–∞!"}</p>`;
        } catch (error) {
            messagesDiv.innerHTML += `<p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.</p>`;
        }
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
    
    document.getElementById("sendButton").addEventListener("click", sendMessage);

    const recordButton = document.getElementById("recordButton");
    const messagesDiv = document.getElementById("messages");

    let mediaRecorder;
    let audioChunks = [];

    recordButton.addEventListener("click", async () => {
        console.log("üé§ –ö–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ");

        if (!mediaRecorder || mediaRecorder.state === "inactive") {
            try {
                console.log("üé§ –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞...");
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];

                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = async () => {
                    console.log("üé§ –ó–∞–ø–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ...");
                    const audioBlob = new Blob(audioChunks, { type: "audio/webm" });
                    audioChunks = [];

                    const formData = new FormData();
                    formData.append("audio", audioBlob, "voice_message.webm");

                    console.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä...", formData);

                    messagesDiv.innerHTML += `<p><strong>–í–∏ (–≥–æ–ª–æ—Å):</strong> üé§ –û–±—Ä–æ–±–∫–∞...</p>`;

                    try {
                        const response = await fetch("/chatbot/voice", {
                            method: "POST",
                            body: formData
                        });

                        console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response);

                        const data = await response.json();
                        if (data.error) {
                            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", data.error);
                            messagesDiv.innerHTML += `<p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> ${data.error}</p>`;
                        } else {
                            console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–µ–∫—Å—Ç:", data.transcription);
                            console.log("ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞:", data.response);
                            messagesDiv.innerHTML += `<p><strong>–í–∏ (–≥–æ–ª–æ—Å):</strong> ${data.transcription}</p>`;
                            messagesDiv.innerHTML += `<p><strong>–ë–æ—Ç:</strong> ${data.response}</p>`;
                        }
                    } catch (error) {
                        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å—É:", error);
                        messagesDiv.innerHTML += `<p><strong>–ü–æ–º–∏–ª–∫–∞:</strong> –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.</p>`;
                    }
                    messagesDiv.scrollTop = messagesDiv.scrollHeight;
                };

                mediaRecorder.start();
                console.log("üéôÔ∏è –ü–æ—á–∞–≤—Å—è –∑–∞–ø–∏—Å...");
                recordButton.textContent = "‚èπÔ∏è"; // –ó–º—ñ–Ω—é—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç–æ–ø
            } catch (error) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:", error);
            }
        } else {
            mediaRecorder.stop();
            console.log("üõë –ó–∞–ø–∏—Å –∑—É–ø–∏–Ω–µ–Ω–æ");
            recordButton.textContent = "üé§"; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
        }
    });
});

